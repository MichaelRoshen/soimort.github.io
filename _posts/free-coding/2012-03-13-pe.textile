---
layout: post
category: free-coding
title: Project Euler / Problem 29~31
description: Mort's solutions to Project Euler (source code released into the Public Domain)
tag: pe
disqus: true
---

h2. Problem 29

How many distinct terms are in the sequence generated by $a^b$ for $2 ≤ a ≤ 100$ and $2 ≤ b ≤ 100$?

h3. Solution:

<script src="https://gist.github.com/2031098.js?file=pe029.py"></script>



h2. Problem 30

Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.

h3. Solution:

<script src="https://gist.github.com/2031151.js?file=pe030.py"></script>



h2. Problem 31

In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:

1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).

It is possible to make £2 in the following way:

1x£1 + 1x50p + 2x20p + 1x5p + 1x2p + 3x1p

How many different ways can £2 be made using any number of coins?

h3. Solution:

My first solution is to calculate a function which has two parameters: the total value to made and the maximum value of coins can be used.

<script src="https://gist.github.com/2031823.js?file=pe031_1.py"></script>

bc. $ time python3 pe031_1.py 
73682
real	0m4.473s
user	0m4.463s
sys	0m0.003s

As predicted this recursive algorithm consumed too much time. Replacing the "sum" function can effectively reduce the execution time (have no idea why this happened).

<script src="https://gist.github.com/2031826.js?file=pe031_2.py"></script>

bc. $ time python3 pe031_2.py 
73682
real	0m2.774s
user	0m2.763s
sys	0m0.003s

Using a different method for counting: for each element in the dictionary (for values of coins) of lists (for total values to made), its value only depends on the sum of some previous elements, thus, a double loop solves the problem. (no recursion needed anymore)

<script src="https://gist.github.com/2031914.js?file=pe031_3.py"></script>

bc. $ time python3 pe031_3.py 
73682
real	0m0.046s
user	0m0.037s
sys	0m0.007s

After read some other's solution on the forum, I realized that a single dimension array and one single loop can solve this more elegantly. So here comes my final program:

<script src="https://gist.github.com/2032083.js?file=pe031.py"></script>

bc. $ time python3 pe031.py 
73682
real	0m0.021s
user	0m0.020s
sys	0m0.000s

