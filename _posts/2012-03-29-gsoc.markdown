---
layout: post
tag: gsoc
---

## Google Summer of Code 2012: Project Proposal (Draft)

<div class="divIndex" style="text-align: right">View Page as <b><a href="https://github.com/soimort/soimort.github.com/blob/master/_posts/2012-03-29-gsoc.markdown">Source</a></b> | <b><a href="https://raw.github.com/soimort/soimort.github.com/master/_posts/2012-03-29-gsoc.markdown">Raw</a></b> | <b><a href="https://github.com/soimort/soimort.github.com/commits/master/_posts/2012-03-29-gsoc.markdown">History</a></b></div>

### Project Title: Python/PySide support for Qt Creator

### Maintainer
* name: [Mort Yao](https://plus.google.com/100974147585154622588)
* email / xmpp: **mort dot yao at gmail dot com**
* irc: **soimort** @ freenode
* link_id: **soimort**
* github: [github.com/soimort](https://github.com/soimort)
* blog: [www.soimort.org/gsoc](http://www.soimort.org/gsoc)

### Background
As a C/C++ programmer I have been using Qt Creator as my main IDE for GUI programming for years; in my experience, although it is the best one ever working with C++/Qt, integrated with a fast and convenient GUI builder, its lack of Python support has made things inconvenient for Python/PySide development. For those who want to create UIs for prototyping in the most efficient way using PySide or PyQt, an integrated Python/PySide support in Qt Creator would be very helpful. On the other hand, for those who want to build C++/Python hybrid applications with Qt GUIs, or just want to write Pythonic bindings for C/C++ libraries, a Qt Creator with Python support can be intuitive and much fun to use.

I found out that the PySide community once had made some effort to write a plugin to add Python support into Qt Creator (from what I found on the GitHub *PySide/QtCreator* repository), however, for some reason it discontinued (that's as far as I know). From what I see in discussion forums, people keep wanting Python support in Qt Creator, and Tobias said though it is not a priority right now, he would like to see someone contributing in this area. I'm eager to see (and also eagerly need myself) an IDE with PySide support therefore I'm thinking of taking it as a GSoC project.

### Abstract
Qt Creator is a C++/Qt IDE with an integrated GUI layout and forms designer; currently it lacks support for Python/PySide development. The main goal of this project is to add fully functional Python/PySide support in a "feature branch" of Qt Creator, as well as some extra components such as optional Python/PySide-related plugins, PySide (and Shiboken) tutorials, demos and examples inside Qt Creator's helper system. Code contributes back to both Qt Creator and PySide repo via Gerrit.

### Roadmap
* Using **Meta-build System** for Python/PySide Projects (rules for *pyside-uic*, *pyside-rcc*, *pyside-lupdate*)
    * *qmake* support
    * *CMake* support
    * (experimental) *qbs* support

* Python Support in **Code Editor**: Implement most of the features that Qt Creator's C++ editor has and Python editor should have (may consider *PyDev* as a reference)
    * (already exist in Qt Creator) Syntax highlighting based on regular expression
    * Content-sensitive help, code completion (should be able to "auto import")
    * Semantic navigation, go to definition, switch between source files
    * Refactoring

* Python Support in **Tokens Browser**
    * Class view, type hierarchy

* Python Support in **Debugger**, etc.
    * Code analysis through *Pylint*
    * Unit test integration with *PyUnit*

* Generating **Project Templates**
    * Projects
        * Other Project
            * Plain Python Project
            * Python Library
            * PySide Project
            * C++/Python Hybrid Project
        * Qt Widget Project
            * PySide Mobility Project
        * Qt Quick Project
            * PySide QtQuick/QML Project
    * Files and Classes
        * Python

* **Pythonic Settings** in Project View
    * Build / Run settings: support for Python 2 (CPython, PyPy and Jython), Python 3
    * Editor / Code Style: *PEP 8*
    * Dependencies

* an **Embedded Interactive Python Console**
    * execute and test code the quick way
    * can be used together with *gdb helper*

* (extra) External Tools / Plugins
    * integrated support for *Shiboken*
    * [TODO]

* Documents, Tutorials and Demos / Examples
    * Getting Started tutorial in Welcome page
    * demos and examples for Python/PySide GUI programming
    * (extra) Shiboken tutorials for creating C++ bindings
    * [TODO]

### Programming Languages
* C++
* Python
* QML (only for writing PySide QtQuick/QML demos, templates and tests)

### Codebase and Working Repository
Code base (Git read-only):

* **Qt** (latest ver 4.8.1)
    * `git://gitorious.org/qt/qt.git`
* **Qt Creator** (latest ver 2.5)
    * `git://gitorious.org/qt-creator/qt-creator.git`
* **PySide** (latest ver 1.1.0)
    * `git://gitorious.org/pyside/pyside.git`

Will be working on my fork of Qt Creator in either one of these repos:

* [**qt-creator-py**](https://gitorious.org/~mort/qt-creator/qt-creator-py) on Gitorious
    * `git://gitorious.org/~mort/qt-creator/qt-creator-py.git`
* [**QtCreator**](https://github.com/soimort/QtCreator) on GitHub
    * `git://github.com/soimort/QtCreator.git`

### Project Site
* [http://qt-creator.soimort.org/](http://qt-creator.soimort.org/)
* [http://www.soimort.org/gsoc/](http://www.soimort.org/gsoc/)

### GSoC Related
* **Weekly report / changelog**: will be blogged regularly on my website
    * [http://www.soimort.org/gsoc/](http://www.soimort.org/gsoc/)
* **Daily commit**: see the git repository page
* **Communication** (will appear in):
    * irc: *#pyside*, *#qt*, *#qt-creator*, *#gsoc*
    * related mailing lists

### Timeline
* **March 26~**: start writing project proposal for application
* **April 2~**: dive into Qt Creator code base; finish requirements document
* **April 9~**: dive into Qt Creator code base; contribute first patch to PySide (if required)
* **April 16~**: dive into Qt Creator code base; start writing design document
* **April 23~**: finish design document //an exam in college
* **April 30~**: support of meta-build system for Python/PySide projects //another exam in college
* **May 7~**: support of meta-build system for Python/PySide projects
* **May 14~**: test for meta-build system
* **May 21~**: test for meta-build system //GSoC begins officially; final exam in college
* **May 28~**: support of code editor (content-sensitive features)
* **June 4~**: support of code editor (semantic-related features) //course project presentation in college
* **June 11~**: support of tokens browser
* **June 18~**: support of debugger
* **June 25~**: Python/PySide project templates and tool settings
* **July 2~**: embedded Python console; test
* **July 9~**: test; first release to public //mid-term evaluation
* **July 16~**: add useful plugins and tools with respect to Python/PySide development (ideas collected from community feedback); trivial feature improvement (from community feedback), other big ones add to future roadmap; more test
* **July 23~**: add useful plugins and tools with respect to Python/PySide development (ideas collected from community feedback); trivial feature improvement (from community feedback), other big ones add to future roadmap; more test
* **July 30~**: write tutorials, demos and examples for PySide in Qt Creator
* **August 6~**: write tutorials, demos and examples for Shiboken in Qt Creator
* **August 13~**: clean up the code and doxygen docs; more test
* **August 20~**: second release to public; community feedback //official "pencils down" date

### A Lttle About Me

I'm a student majoring in Software Engineering in a Swedish college. Although my experience with Python is not very long, I have a firm C/C++ background (an experience of seven years' programming) and used Qt Creator as my IDE for C++ GUI programming.